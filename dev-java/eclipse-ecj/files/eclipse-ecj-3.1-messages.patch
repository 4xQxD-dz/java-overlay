diff -ru eclipse-ecj-3.1/src/org/eclipse/jdt/internal/compiler/batch/messages.properties eclipse-ecj-3.1-patched/src/org/eclipse/jdt/internal/compiler/batch/messages.properties
--- eclipse-ecj-3.1/src/org/eclipse/jdt/internal/compiler/batch/messages.properties	2005-08-25 19:09:02.000000000 -0400
+++ eclipse-ecj-3.1-patched/src/org/eclipse/jdt/internal/compiler/batch/messages.properties	2005-08-28 14:40:59.000000000 -0400
@@ -1,69 +1,211 @@
 ###############################################################################
-# Copyright (c) 2000, 2004 IBM Corporation and others.
-# All rights reserved. This program and the accompanying materials 
-# are made available under the terms of the Common Public License v1.0
+# Copyright (c) 2000, 2005 IBM Corporation and others.
+# All rights reserved. This program and the accompanying materials
+# are made available under the terms of the Eclipse Public License v1.0
 # which accompanies this distribution, and is available at
-# http://www.eclipse.org/legal/cpl-v10.html
-# 
+# http://www.eclipse.org/legal/epl-v10.html
+#
 # Contributors:
 #     IBM Corporation - initial API and implementation
 ###############################################################################
-### Eclipse Java Core Compiler messages.
+### JavaBatchCompiler messages.
 
-### compilation
-compilation.unresolvedProblem =  Unresolved compilation problem: \n
-compilation.unresolvedProblems = Unresolved compilation problems: \n
-compilation.request    = [parsing    {2} - #{0}/{1}]
-compilation.loadBinary = [reading    {0}.class]
-compilation.process    = [analyzing  {2} - #{0}/{1}]
-compilation.write      = [writing    {1} - #{0}]
-compilation.done       = [completed  {2} - #{0}/{1}]
-compilation.units      = [{0} units compiled]
-compilation.unit       = [{0} unit compiled]
-compilation.internalError = Internal compiler error
+### compiler
+#Format: compiler.name = word1 word2 word3
+compiler.name = Eclipse Java Compiler
+#Format: compiler.version = 0.XXX[, other words (don't forget the comma if adding other words)]
+compiler.version = 0.570, 3.1.0 release
+compiler.copyright = Copyright IBM Corp 2000, 2005. All rights reserved.
+
+### scanning
+scanning.start = Collecting source files inside {0}
+
+### progress
+progress.compiling = Compiling
+
+### compile
+compile.repetition = [repetition {0}/{1}]
+compile.instantTime = [compiled {0} lines in {1} ms: {2} lines/s]
+compile.averageTime = [average, excluding min-max {0} lines in {1} ms: {2} lines/s]
+compile.totalTime = [total compilation time: {0}]
+compile.oneProblem = 1 problem ({0})
+compile.severalProblemsErrorsOrWarnings = {0} problems ({1})
+compile.severalProblemsErrorsAndWarnings = {0} problems ({1}, {2})
+compile.oneError = 1 error
+compile.severalErrors = {0} errors
+compile.oneWarning = 1 warning
+compile.severalWarnings = {0} warnings
+compile.oneClassFileGenerated = [1 .class file generated]
+compile.severalClassFilesGenerated = [{0} .class files generated]
+
+### configure
+configure.requiresJDK1.2orAbove = Need to use a JVM >= 1.2
+configure.duplicateLog = duplicate log specification: {0}
+configure.duplicateRepeat = duplicate repeat specification: {0}
+configure.duplicateMaxProblems = duplicate max problems specification: {0}
+configure.duplicateCompliance = duplicate compliance setting specification: {0}
+configure.duplicateSource = duplicate source compliance setting specification: {0}
+configure.duplicateTarget = duplicate target compliance setting specification: {0}
+configure.source = source level should be comprised in between ''1.3'' and ''1.5'' (or ''5'' or ''5.0''): {0}
+configure.duplicateOutputPath = duplicate output path specification: {0}
+configure.duplicateBootClasspath = duplicate bootclasspath specification: {0}
+configure.duplicateExtdirs = duplicate extdirs specification: {0}
+configure.duplicateSourcepath = duplicate sourcepath specification: {0}
+configure.invalidDebugOption = invalid debug option: {0}
+configure.invalidWarningConfiguration = invalid warning configuration: {0}
+configure.invalidWarning = invalid warning: {0}
+configure.invalidWarningOption = invalid warning option: {0}
+configure.targetJDK = target level should be comprised in between ''1.1'' and ''1.5'' (or ''5'' or ''5.0''): {0}
+configure.incompatibleTargetForSource = Target level ''{0}'' is incompatible with source level ''{1}''. A target level ''{1}'' or better is required
+configure.incompatibleComplianceForSource = Compliance level ''{0}'' is incompatible with source level ''{1}''. A compliance level ''{1}'' or better is required
+configure.incompatibleComplianceForTarget = Compliance level ''{0}'' is incompatible with target level ''{1}''. A compliance level ''{1}'' or better is required
+configure.repetition = repetition must be a positive integer: {0}
+configure.maxProblems = max problems must be a positive integer: {0}
+configure.directoryNotExist = directory does not exist: {0}
+configure.IOError = i/o error : unable to retrieve .JAVA files in directory: {0}
+configure.noClasspath = no classpath defined, using default directory instead
+configure.incorrectClasspath = incorrect classpath: {0}
+configure.invalidexpansionargumentname = expansion argument file {0} doesn''t exist or cannot be read
+configure.cannotOpenLog = cannot open .log file
+configure.unexpectedCustomEncoding = unexpected custom encoding specification: {0}[{1}]
+configure.unsupportedEncoding = unsupported encoding format: {0}
+configure.duplicateDefaultEncoding = duplicate default encoding format specification: {0}
+configure.invalidTaskTag ={0} is an invalid task tag
+
+### requestor
+requestor.error = {0}. ERROR in {1}
+requestor.warning = {0}. WARNING in {1}
+requestor.notRetrieveErrorMessage = Cannot retrieve the error message for {0}
+
+### unit
+unit.more = File {0} is specified more than once
+unit.missing = File {0} is missing
 
 ### output
-output.isFile =  The outDir is a file : {0}
-output.isFileNotDirectory = The outDir is a file not a directory.
-output.dirName =  The output dir name is : {0}
-output.notValidAll =  The outDir is not a valid directory name. All the directories cannot be created.
-output.fileName =  file name : {0}
-output.notValid = The outDir is not a valid directory name. The directory cannot be created.
-
-### problem
-problem.noSourceInformation = \n!! no source information available !!
-problem.atLine = (at line {0})
-
-### abort
-abort.invalidAttribute = SANITY CHECK: Invalid attribute for local variable {0}
-abort.missingCode = Missing code implementation in the compiler
-abort.againstSourceModel = Cannot compile against source model {0} issued from {1}
-
-### accept
-accept.cannot = Cannot accept the compilation unit: 
-
-### parser
-parser.incorrectPath = The path for the javadcl.java file is incorrect
-parser.moveFiles = MOVE FILES IN THE Runtime DIRECTORY OF Parser.class
-parser.syntaxRecovery = SYNTAX RECOVERY
-parser.regularParse = REGULAR PARSE
-parser.missingFile = missing file {0}
-parser.corruptedFile = corrupted file {0}
-parser.endOfFile = end of file
-parser.endOfConstructor = end of constructor
-parser.endOfMethod = end of method
-parser.endOfInitializer = end of initializer
-
-### binding
-binding.subclass = anonymous subclass of {0}
-binding.implementation = anonymous implementation of {0}
-
-### ast
-ast.missingCode = Missing code gen implementation
-
-### constant
-constant.cannotCastedInto =  {0} constant cannot be casted into {1}
-constant.cannotConvertedTo = {0} constant cannot be converted to {1}
+output.noClassFileCreated = No .class file created for file named {0} because of an IOException.
 
 ### miscellaneous
-error.undefinedBaseType = Undefined base type: {0}
+misc.version = {0} {1}, {2}
+misc.usage = {1} {2}, {3}\n\
+\ \n\
+\ Usage: <options> <source files | directories>\n\
+\ If directories are specified, then their source contents are compiled.\n\
+\ Possible options are listed below. Options enabled by default are prefixed with ''+''\n\
+\ \n\
+\ Classpath options:\n\
+\    -cp -classpath <directories and zip/jar files separated by {0}>\n\
+\                       specify location for application classes and sources. Each\n\
+\                       directory or file can specify access rules for types between\n\
+\                       ''['' and '']'' (e.g. [-X.java] to deny access to type X)\n\
+\    -bootclasspath <directories and zip/jar files separated by {0}>\n\
+\                       specify location for system classes. Each directory or file can\n\
+\                       specify access rules for types between ''['' and '']'' (e.g. [-X.java]\n\
+\                       to deny access to type X)\n\
+\    -sourcepath <directories separated by {0}>\n\
+\                       specify location for application sources. Each directory can\n\
+\                       specify access rules for types between ''['' and '']'' (e.g. [-X.java]\n\
+\                       to deny access to type X)\n\
+\    -extdirs <directories separated by {0}>\n\
+\                       specify location for extension zip/jar files\n\
+\    -d <dir>           destination directory (if omitted, no directory is created)\n\
+\    -d none            generate no .class files\n\
+\    -encoding <enc>    specify custom encoding for all sources. Each file/directory can override it\n\
+\                       when suffixed with ''[''<enc>'']'' (e.g. X.java[utf8])\n\
+\ \n\
+\ Compliance options:\n\
+\    -1.3               use 1.3 compliance level (implicit -source 1.3 -target 1.1)\n\
+\    -1.4             + use 1.4 compliance level (implicit -source 1.3 -target 1.2)\n\
+\    -1.5               use 1.5 compliance level (implicit -source 1.5 -target 1.5)\n\
+\    -source <version>  set source level: 1.3 to 1.5 (or 5 or 5.0)\n\
+\    -target <version>  set classfile target level: 1.1 to 1.5 (or 5 or 5.0)\n\
+\ \n\
+\ Warning options:\n\
+\    -deprecation     + deprecation outside deprecated code\n\
+\    -nowarn            disable all warnings\n\
+\    -warn:none         disable all warnings\n\
+\    -warn:<warnings separated by ,>    enable exactly the listed warnings\n\
+\    -warn:+<warnings separated by ,>   enable additional warnings\n\
+\    -warn:-<warnings separated by ,>   disable specific warnings\n\
+\      allDeprecation       deprecation including inside deprecated code\n\
+\      allJavadoc           invalid or missing javadoc\n\
+\      assertIdentifier   + ''assert'' used as identifier\n\
+\      boxing               autoboxing conversion\n\
+\      charConcat         + char[] in String concat\n\
+\      conditionAssign      possible accidental boolean assignment\n\
+\      constructorName    + method with constructor name\n\
+\      dep-ann              missing @Deprecated annotation\n\
+\      deprecation        + deprecation outside deprecated code\n\
+\      emptyBlock           undocumented empty block\n\
+\      enumSwitch           incomplete enum switch\n\
+\      fieldHiding          field hiding another variable\n\
+\      finalBound           type parameter with final bound\n\
+\      finally            + finally block not completing normally\n\
+\      hiding               macro for fieldHiding, localHiding, typeHiding and maskedCatchBlock\n\
+\      incomplete-switch    same as enumSwitch\n\
+\      indirectStatic       indirect reference to static member\n\
+\      intfAnnotation     + annotation type used as super interface\n\
+\      intfNonInherited   + interface non-inherited method compatibility\n\
+\      javadoc              invalid javadoc\n\
+\      localHiding          local variable hiding another variable\n\
+\      maskedCatchBlock   + hidden catch block\n\
+\      nls                  string literal lacking non-nls tag //$NON-NLS-<n>$\n\
+\      noEffectAssign     + assignment without effect\n\
+\      null                 missing or redundant null check\n\
+\      over-ann             missing @Override annotation\n\
+\      pkgDefaultMethod   + attempt to override package-default method\n\
+\      semicolon            unnecessary semicolon, empty statement\n\
+\      serial             + missing serialVersionUID\n\
+\      specialParamHiding   constructor or setter parameter hiding another field\n\
+\      static-access        macro for indirectStatic and staticReceiver\n\
+\      staticReceiver     + non-static reference to static member\n\
+\      suppress           + enable @SuppressWarnings\n\
+\      synthetic-access     same as syntheticAccess\n\
+\      syntheticAccess      synthetic access for innerclass\n\
+\      tasks(<tags separated by |>) tasks identified by tags inside comments\n\
+\      typeHiding         + type parameter hiding another type\n\
+\      unchecked          + unchecked type operation\n\
+\      unnecessaryElse      unnecessary else clause\n\
+\      unqualified-field-access same as unQualifiedField\n\
+\      unqualifiedField     unqualified reference to field\n\
+\      unused               macro for unusedArgument, unusedImport, unusedLocal, unusedPrivate and unusedThrown\n\
+\      unusedArgument       unread method parameter\n\
+\      unusedImport       + unused import declaration\n\
+\      unusedLocal        + unread local variable\n\
+\      unusedPrivate      + unused private member declaration\n\
+\      unusedThrown         unused declared thrown exception\n\
+\      uselessTypeCheck     unnecessary cast/instanceof operation\n\
+\      varargsCast        + varargs argument need explicit cast\n\
+\      warningToken       + unhandled warning token in @SuppressWarnings\n\
+\ \n\
+\ Debug options:\n\
+\    -g[:lines,vars,source] custom debug info\n\
+\    -g:lines,source  + both lines table and source debug info\n\
+\    -g                 all debug info\n\
+\    -g:none            no debug info\n\
+\    -preserveAllLocals preserve unused local vars for debug purpose\n\
+\ \n\
+\ Ignored options:\n\
+\    -J<option>         pass option to virtual machine (ignored)\n\
+\    -X<option>         specify non-standard option (ignored)\n\
+\    -X                 print non-standard options and exit (ignored)\n\
+\    -O                 optimize for execution time (ignored)\n\
+\ \n\
+\ Advanced options:\n\
+\    @<file>            read command line arguments from file\n\
+\    -maxProblems <n>   max number of problems per compilation unit (100 by default)\n\
+\    -log <file>        log to a file. If the file extension is ''.xml'', then the log\n\
+\                       will be a xml file.\n\
+\    -proceedOnError    do not stop at first error, dumping class files with problem methods\n\
+\    -verbose           enable verbose output\n\
+\    -referenceInfo     compute reference info\n\
+\    -progress          show progress (only in -log mode)\n\
+\    -time              display speed information \n\
+\    -noExit            do not call System.exit(n) at end of compilation (n==0 if no error)\n\
+\    -repeat <n>        repeat compilation process <n> times for perf analysis\n\
+\    -inlineJSR         inline JSR bytecode (implicit if target >= 1.5)\n\
+\    -enableJavadoc     consider references in javadoc\n\
+\ \n\
+\    -? -help           print this help message\n\
+\    -v -version        print compiler version\n\
+\    -showversion       print compiler version and continue\n
+
