Only in hibernate-extensions-2.1.3-patched/tools: .build.xml.swp
Only in hibernate-extensions-2.1.3-patched/tools: build
Only in hibernate-extensions-2.1.3-patched/tools: build.properties
Only in hibernate-extensions-2.1.3-patched/tools/src/java/net/sf/hibernate/tool/hbm2java: .ClassMapping.java.swp
Only in hibernate-extensions-2.1.3-patched/tools/src/java/net/sf/hibernate/tool/hbm2java: .CodeGenerator.java.swp
Only in hibernate-extensions-2.1.3-patched/tools/src/java/net/sf/hibernate/tool/hbm2java: .Generator.java.swp
diff -ru hibernate-extensions-2.1.3/tools/src/java/net/sf/hibernate/tool/hbm2java/CodeGenerator.java hibernate-extensions-2.1.3-patched/tools/src/java/net/sf/hibernate/tool/hbm2java/CodeGenerator.java
--- hibernate-extensions-2.1.3/tools/src/java/net/sf/hibernate/tool/hbm2java/CodeGenerator.java	2004-11-22 16:06:37.000000000 -0500
+++ hibernate-extensions-2.1.3-patched/tools/src/java/net/sf/hibernate/tool/hbm2java/CodeGenerator.java	2005-06-30 20:41:41.000000000 -0400
@@ -95,9 +95,10 @@
             builder.setValidation(true);
     		for ( Iterator iter = mappingFiles.iterator(); iter.hasNext(); ) {
             	// parse the mapping file
-				File file = new File( (String) iter.next() );
+				File hbmFile = new File( (String) iter.next() );
+				long hbmTimestamp = hbmFile.lastModified();
 			
-				Document document = builder.build( file);
+				Document document = builder.build(hbmFile);
             	
             	Element rootElement = document.getRootElement();
             	
@@ -109,13 +110,13 @@
                 MappingElement me = new MappingElement(rootElement, null/**TODO-hbm2java: - should be config.xml**/);
             	Iterator classElements = rootElement.getChildren("class").iterator();
                 MultiMap mm = MetaAttributeHelper.loadAndMergeMetaMap(rootElement, globalMetas);
-                handleClass(pkg,me, classMappings, classElements, mm, false);
+                handleClass(pkg,me, classMappings, classElements, mm, false,hbmTimestamp);
         	    
 				classElements = rootElement.getChildren("subclass").iterator();
-				handleClass(pkg,me,classMappings, classElements, mm, true);
+				handleClass(pkg,me,classMappings, classElements, mm, true,hbmTimestamp);
 				
 				classElements = rootElement.getChildren("joined-subclass").iterator();
-				handleClass(pkg,me,classMappings, classElements, mm, true);
+				handleClass(pkg,me,classMappings, classElements, mm, true,hbmTimestamp);
     		}
     
             // generate source files
@@ -129,6 +130,37 @@
             e.printStackTrace();
         }
     }
+	private static void handleClass(String classPackage, MappingElement me, HashMap classMappings, Iterator classElements, MultiMap mm, boolean extendz, long hbmTimestamp) throws MappingException {
+		while ( classElements.hasNext() ) {
+			Element clazz = (Element) classElements.next();
+			
+			if(!extendz) {
+		    	ClassMapping cmap = new ClassMapping(classPackage, clazz, me, mm);
+				storeMapping(cmap,classMappings, hbmTimestamp);
+			} else {				
+				String ex = clazz.getAttributeValue("extends");
+				if(ex==null) {
+					throw new MappingException("Missing extends attribute on <" + clazz.getName() + " name=" + clazz.getAttributeValue("name") + ">" );
+				}
+				ClassMapping superclass = (ClassMapping) classMappings.get(ex);
+				if(superclass == null) {
+					throw new MappingException("Cannot extend unmapped class " + ex);					
+				}
+				ClassMapping subclassMapping = new ClassMapping(classPackage, me, superclass.getClassName(), superclass, clazz, mm);
+
+				storeMapping(subclassMapping,classMappings,hbmTimestamp);
+			}
+		}
+	}
+
+	private static void storeMapping(ClassMapping newMapping, HashMap classMappings, long hbmTimestamp) {
+		File outputFile = new File(newMapping.getGeneratedPackageName() + File.separator + newMapping.getGeneratedName());
+		long outputFileTimestamp = outputFile.lastModified();
+
+		if (hbmTimestamp > outputFileTimestamp) {
+    		newMapping.storeIn(classMappings);
+		}
+	}
 
 	private static void handleClass(String classPackage, MappingElement me, HashMap classMappings, Iterator classElements, MultiMap mm, boolean extendz) throws MappingException {
 		while ( classElements.hasNext() ) {
Only in hibernate-extensions-2.1.3-patched/tools: target
